// src/games/Picker/GiraffeRace/GiraffeRace.tsx

import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { startGiraffeRaceGame } from './giraffeRaceGame'; // Make sure this path is correct
import type { Player } from './giraffeRaceGame'; // Import the Player type
import PickerInitModal from '../PickerInitModal';
import PickerGameOverModal from '../PickerGameOverModal';
import type { FinishPlayer } from '../PickerGameOverModal';

const GiraffeRace: React.FC = () => {
  const navigate = useNavigate();
  const canvasRef = useRef<HTMLCanvasElement>(null);
  
  // State Management
  const [showInitModal, setShowInitModal] = useState(true);
  const [showGameOverModal, setShowGameOverModal] = useState(false);
  const [winners, setWinners] = useState<FinishPlayer[]>([]);
  const [gameData, setGameData] = useState<{ players: Player[], duration: number } | null>(null);
  
  const gameInstanceRef = useRef<{ destroy: () => void } | null>(null);

  // Game configuration
  const gameConfig = {
    gameId: 'giraffe-race',
    category: 'Picker',
    ticketPriceSol: 0.01,
    destinationWallet: '4TA49YPJRYbQF5riagHj3DSzDeMek9fHnXChQpgnKkzy',
    gameTitle: 'Giraffe Race',
    minPlayers: 2,
  };

  // --- Handlers for Modals and Game Flow ---

  const handleInitSuccess = (txSig: string, players: Player[], raceDuration: number) => {
    console.log('Payment successful:', txSig);
    console.log('Selected players:', players);
    console.log('Race duration:', raceDuration);
    
    setShowInitModal(false);
    // Store the game data; the useEffect will start the game
    setGameData({ players, duration: raceDuration });
  };

  const handleInitError = (error: string) => {
    console.error('Init error:', error);
    navigate('/games'); // Go back if there's an error
  };

  const handleInitClose = () => {
    setShowInitModal(false);
    navigate('/games');
  };

  const handleRaceEnd = (raceResults: FinishPlayer[]) => {
    console.log('Race ended in React component with results:', raceResults);
    setWinners(raceResults);
    setShowGameOverModal(true);
  };
  
  const handleGameError = (error: string) => {
    console.error('Phaser Game Error:', error);
    // Optionally show an error toast to the user
    navigate('/games'); // Go back to safety
  };

  const handleRestart = () => {
    setShowGameOverModal(false);
    setWinners([]);
    setGameData(null);
    setShowInitModal(true); // Show the init modal again
  };

  const handleGameOverClose = () => {
    setShowGameOverModal(false);
    navigate('/games');
  };

  // --- useEffect for Game Lifecycle Management ---

  useEffect(() => {
    // If we have game data and a canvas, start the game.
    if (gameData && canvasRef.current) {
      // Ensure we don't start multiple instances
      if (gameInstanceRef.current) {
        gameInstanceRef.current.destroy();
      }

      gameInstanceRef.current = startGiraffeRaceGame(
        canvasRef.current,
        gameData.players,
        gameData.duration,
        handleRaceEnd, // The game will call this when it's over
        handleGameError
      );
    }

    // Cleanup function: This will be called when the component unmounts
    // or when the dependencies of the useEffect hook change.
    return () => {
      gameInstanceRef.current?.destroy();
      gameInstanceRef.current = null;
    };
  }, [gameData]); // This hook runs only when `gameData` changes.


  return (
    <div className="w-full h-screen bg-gradient-to-br from-green-900 via-green-800 to-green-900 flex flex-col items-center justify-center p-4">
      
      {/* The canvas will be hidden or shown based on whether we have game data */}
      <div className="relative w-full max-w-6xl aspect-video">
        <canvas
          ref={canvasRef}
          className={`w-full h-full border-4 border-yellow-400 rounded-lg shadow-2xl transition-opacity duration-500 ${
            gameData ? 'opacity-100' : 'opacity-0'
          }`}
        />
      </div>
      
      {/* Init Modal */}
      {showInitModal && (
        <PickerInitModal
          gameId={gameConfig.gameId}
          category={gameConfig.category}
          ticketPriceSol={gameConfig.ticketPriceSol}
          destinationWallet={gameConfig.destinationWallet}
          onSuccess={handleInitSuccess}
          onError={handleInitError}
          onClose={handleInitClose}
          gameTitle={gameConfig.gameTitle}
          minPlayers={gameConfig.minPlayers}
        />
      )}

      {/* Game Over Modal */}
      {showGameOverModal && (
        <PickerGameOverModal
          winners={winners}
          onRestart={handleRestart}
          onClose={handleGameOverClose}
          onGoToProfile={() => navigate('/profile')}
          onGoToLeaderboards={() => navigate('/leaderboards')}
          gameTitle={gameConfig.gameTitle}
        />
      )}
    </div>
  );
};

export default GiraffeRace;